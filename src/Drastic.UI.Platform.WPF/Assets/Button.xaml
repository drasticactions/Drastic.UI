<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="BaseLightWindowButtonStyle"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="Background"
                Value="{DynamicResource TransparentWhiteBrush}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          Opacity="1.0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="contentPresenter"
                                    Property="Opacity"
                                    Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
			<Trigger
				Property="IsMouseOver"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource SemiTransparentWhiteBrush}" />
			</Trigger>
		</Style.Triggers>
    </Style>

    <Style x:Key="LightOtherWindowButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource BaseLightWindowButtonStyle}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="Width"
                Value="Auto" />
        <Setter Property="Padding"
                Value="14, 5" />
    </Style>

    <Style x:Key="LightCommandWindowButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource BaseLightWindowButtonStyle}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="Width"
                Value="45" />
        <Setter Property="Padding"
                Value="14, 5" />
    </Style>



    <Style x:Key="LightRedCommandWindowButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource LightCommandWindowButtonStyle}">

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AppBarButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource BaseLightWindowButtonStyle}">
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="Width"
                Value="72" />
        <Setter Property="Padding"
                Value="8, 5" />

    </Style>

   
    <Style x:Key="BaseLightWindowToggleButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="Background"
                Value="{DynamicResource TransparentWhiteBrush}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          Opacity="1.0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="contentPresenter"
                                    Property="Opacity"
                                    Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
			<Trigger
				Property="IsMouseOver"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource SemiTransparentWhiteBrush}" />
			</Trigger>
		</Style.Triggers>
    </Style>

    <Style x:Key="AppBarToggleButtonStyle"
           TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource BaseLightWindowToggleButtonStyle}">
        <Setter Property="Width"
                Value="72" />
        <Setter Property="Padding"
                Value="8, 5" />

    </Style>
</ResourceDictionary>